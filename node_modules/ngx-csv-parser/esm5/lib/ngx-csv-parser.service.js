import { __assign, __decorate, __values } from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { NgxCSVParserError } from './_model/ngx-csv-parser-error.interface';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var NgxCsvParser = /** @class */ (function () {
    function NgxCsvParser() {
        this.defaultCSVParserConfig = {
            header: true,
            delimiter: ','
        };
    }
    NgxCsvParser.prototype.parse = function (csvFile, config) {
        var _this = this;
        config = __assign(__assign({}, this.defaultCSVParserConfig), config);
        var ngxCSVParserObserver = new Observable(function (observer) {
            try {
                var csvRecords_1 = null;
                if (_this.isCSVFile(csvFile)) {
                    var reader_1 = new FileReader();
                    reader_1.readAsText(csvFile);
                    reader_1.onload = function () {
                        var csvData = reader_1.result;
                        var csvRecordsArray = _this.csvStringToArray(csvData.trim(), config.delimiter);
                        var headersRow = _this.getHeaderArray(csvRecordsArray);
                        csvRecords_1 = _this.getDataRecordsArrayFromCSVFile(csvRecordsArray, headersRow.length, config);
                        observer.next(csvRecords_1);
                        observer.complete();
                    };
                    reader_1.onerror = function () {
                        _this.badCSVDataFormatErrorHandler(observer);
                    };
                }
                else {
                    _this.notCSVFileErrorHandler(observer);
                }
            }
            catch (error) {
                _this.unknownCSVParserErrorHandler(observer);
            }
        });
        return ngxCSVParserObserver;
    };
    NgxCsvParser.prototype.csvStringToArray = function (csvDataString, delimiter) {
        var regexPattern = new RegExp(("(\\" + delimiter + "|\\r?\\n|\\r|^)(?:\"((?:\\\\.|\"\"|[^\\\\\"])*)\"|([^\\" + delimiter + "\"\\r\\n]*))"), "gi");
        var matchedPatternArray = regexPattern.exec(csvDataString);
        var resultCSV = [[]];
        while (matchedPatternArray) {
            if (matchedPatternArray[1].length && matchedPatternArray[1] !== delimiter) {
                resultCSV.push([]);
            }
            var cleanValue = matchedPatternArray[2] ?
                matchedPatternArray[2].replace(new RegExp("[\\\\\"](.)", "g"), '$1') : matchedPatternArray[3];
            resultCSV[resultCSV.length - 1].push(cleanValue);
            matchedPatternArray = regexPattern.exec(csvDataString);
        }
        return resultCSV;
    };
    NgxCsvParser.prototype.getDataRecordsArrayFromCSVFile = function (csvRecordsArray, headerLength, config) {
        var dataArr = [];
        var headersArray = csvRecordsArray[0];
        var startingRowToParseData = config.header ? 1 : 0;
        for (var i = startingRowToParseData; i < csvRecordsArray.length; i++) {
            var data = csvRecordsArray[i];
            if (data.length === headerLength && config.header) {
                var csvRecord = {};
                for (var j = 0; j < data.length; j++) {
                    if ((data[j] === undefined) || (data[j] === null)) {
                        csvRecord[headersArray[j]] = "";
                    }
                    else {
                        csvRecord[headersArray[j]] = data[j].trim();
                    }
                }
                dataArr.push(csvRecord);
            }
            else {
                dataArr.push(data);
            }
        }
        return dataArr;
    };
    NgxCsvParser.prototype.isCSVFile = function (file) {
        return file.name.toLowerCase().endsWith('.csv');
    };
    NgxCsvParser.prototype.getHeaderArray = function (csvRecordsArr) {
        var e_1, _a;
        var headers = csvRecordsArr[0];
        var headerArray = [];
        try {
            for (var headers_1 = __values(headers), headers_1_1 = headers_1.next(); !headers_1_1.done; headers_1_1 = headers_1.next()) {
                var header = headers_1_1.value;
                headerArray.push(header);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (headers_1_1 && !headers_1_1.done && (_a = headers_1.return)) _a.call(headers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return headerArray;
    };
    NgxCsvParser.prototype.notCSVFileErrorHandler = function (observer) {
        var ngcCSVParserError = this.errorBuilder('NOT_A_CSV_FILE', 'Selected file is not a csv File Type.', 2);
        observer.error(ngcCSVParserError);
    };
    NgxCsvParser.prototype.unknownCSVParserErrorHandler = function (observer) {
        var ngcCSVParserError = this.errorBuilder('UNKNOWN_ERROR', 'Unknown error. Please refer to official documentation for library usage.', 404);
        observer.error(ngcCSVParserError);
    };
    NgxCsvParser.prototype.badCSVDataFormatErrorHandler = function (observer) {
        var ngcCSVParserError = this.errorBuilder('BAD_CSV_DATA_FORMAT', 'Unable to parse CSV File.', 1);
        observer.error(ngcCSVParserError);
    };
    NgxCsvParser.prototype.errorBuilder = function (type, message, code) {
        var ngcCSVParserError = new NgxCSVParserError();
        ngcCSVParserError.type = type;
        ngcCSVParserError.message = message;
        ngcCSVParserError.code = code;
        return ngcCSVParserError;
    };
    NgxCsvParser.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxCsvParser_Factory() { return new NgxCsvParser(); }, token: NgxCsvParser, providedIn: "root" });
NgxCsvParser.ɵfac = function NgxCsvParser_Factory(t) { return new (t || NgxCsvParser)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCsvParser, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return NgxCsvParser;
}());
export { NgxCsvParser };
var CSVParserConfig = /** @class */ (function () {
    function CSVParserConfig() {
    }
    return CSVParserConfig;
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNzdi1wYXJzZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmd4LWNzdi1wYXJzZXIvbGliL25neC1jc3YtcGFyc2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM1RTs7QUFJQTtBQUVtQixJQUZuQjtBQUEwQixRQUVkLDJCQUFzQixHQUFHO0FBQ3JDLFlBQVEsTUFBTSxFQUFFLElBQUk7QUFDcEIsWUFBUSxTQUFTLEVBQUUsR0FBRztBQUN0QixTQUFLLENBQUM7QUFDTixLQStIQztBQUNELElBL0hJLDRCQUFLLEdBQUwsVUFBTSxPQUFhLEVBQUUsTUFBdUI7QUFBSSxRQUFoRCxpQkEwQ0M7QUFDTCxRQXpDUSxNQUFNLHlCQUNDLElBQUksQ0FBQyxzQkFBc0IsR0FDM0IsTUFBTSxDQUNaLENBQUM7QUFDVixRQUNRLElBQU0sb0JBQW9CLEdBQUcsSUFBSSxVQUFVLENBQUMsVUFBQyxRQUFrRDtBQUFJLFlBQy9GLElBQUk7QUFDaEIsZ0JBQWdCLElBQUksWUFBVSxHQUFHLElBQUksQ0FBQztBQUN0QyxnQkFDZ0IsSUFBSSxLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzdDLG9CQUNvQixJQUFNLFFBQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQ3BELG9CQUFvQixRQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9DLG9CQUNvQixRQUFNLENBQUMsTUFBTSxHQUFHO0FBQzlCLHdCQUFrQixJQUFNLE9BQU8sR0FBRyxRQUFNLENBQUMsTUFBTSxDQUFDO0FBQ3RELHdCQUF3QixJQUFNLGVBQWUsR0FBRyxLQUFJLENBQUMsZ0JBQWdCLENBQUUsT0FBa0IsQ0FB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QUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFwSUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFxSUEsQUE1SUEsQUE0SUEsQUFySUEsQUFxSUEsQUFySUEsQUFBQSxBQXVJQSxBQUlBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBTEEsQUFLQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTmd4Q1NWUGFyc2VyRXJyb3IgfSBmcm9tICcuL19tb2RlbC9uZ3gtY3N2LXBhcnNlci1lcnJvci5pbnRlcmZhY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hDc3ZQYXJzZXIge1xyXG5cclxuICAgIHByaXZhdGUgZGVmYXVsdENTVlBhcnNlckNvbmZpZyA9IHtcclxuICAgICAgICBoZWFkZXI6IHRydWUsXHJcbiAgICAgICAgZGVsaW1pdGVyOiAnLCdcclxuICAgIH07XHJcblxyXG4gICAgcGFyc2UoY3N2RmlsZTogRmlsZSwgY29uZmlnOiBDU1ZQYXJzZXJDb25maWcpOiBPYnNlcnZhYmxlPEFycmF5PGFueT4gfCBOZ3hDU1ZQYXJzZXJFcnJvcj4ge1xyXG5cclxuICAgICAgICBjb25maWcgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuZGVmYXVsdENTVlBhcnNlckNvbmZpZyxcclxuICAgICAgICAgICAgLi4uY29uZmlnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgbmd4Q1NWUGFyc2VyT2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IE9ic2VydmVyPEFycmF5PGFueT4gfCBOZ3hDU1ZQYXJzZXJFcnJvcj4pID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxldCBjc3ZSZWNvcmRzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0NTVkZpbGUoY3N2RmlsZSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChjc3ZGaWxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3N2RGF0YSA9IHJlYWRlci5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNzdlJlY29yZHNBcnJheSA9IHRoaXMuY3N2U3RyaW5nVG9BcnJheSgoY3N2RGF0YSBhcyBzdHJpbmcpLnRyaW0oKSwgY29uZmlnLmRlbGltaXRlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzUm93ID0gdGhpcy5nZXRIZWFkZXJBcnJheShjc3ZSZWNvcmRzQXJyYXkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3N2UmVjb3JkcyA9IHRoaXMuZ2V0RGF0YVJlY29yZHNBcnJheUZyb21DU1ZGaWxlKGNzdlJlY29yZHNBcnJheSwgaGVhZGVyc1Jvdy5sZW5ndGgsIGNvbmZpZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGNzdlJlY29yZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhZENTVkRhdGFGb3JtYXRFcnJvckhhbmRsZXIob2JzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdENTVkZpbGVFcnJvckhhbmRsZXIob2JzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5rbm93bkNTVlBhcnNlckVycm9ySGFuZGxlcihvYnNlcnZlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5neENTVlBhcnNlck9ic2VydmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGNzdlN0cmluZ1RvQXJyYXkoY3N2RGF0YVN0cmluZzogc3RyaW5nLCBkZWxpbWl0ZXI6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHJlZ2V4UGF0dGVybiA9IG5ldyBSZWdFeHAoKGAoXFxcXCR7ZGVsaW1pdGVyfXxcXFxccj9cXFxcbnxcXFxccnxeKSg/OlxcXCIoKD86XFxcXFxcXFwufFxcXCJcXFwifFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFteXFxcXCR7ZGVsaW1pdGVyfVxcXCJcXFxcclxcXFxuXSopKWApLCBcImdpXCIpXHJcbiAgICAgICAgbGV0IG1hdGNoZWRQYXR0ZXJuQXJyYXkgPSByZWdleFBhdHRlcm4uZXhlYyhjc3ZEYXRhU3RyaW5nKTtcclxuICAgICAgICBjb25zdCByZXN1bHRDU1YgPSBbW11dO1xyXG4gICAgICAgIHdoaWxlIChtYXRjaGVkUGF0dGVybkFycmF5KSB7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaGVkUGF0dGVybkFycmF5WzFdLmxlbmd0aCAmJiBtYXRjaGVkUGF0dGVybkFycmF5WzFdICE9PSBkZWxpbWl0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdENTVi5wdXNoKFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBjbGVhblZhbHVlID0gbWF0Y2hlZFBhdHRlcm5BcnJheVsyXSA/XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVkUGF0dGVybkFycmF5WzJdLnJlcGxhY2UobmV3IFJlZ0V4cChcIltcXFxcXFxcXFxcXCJdKC4pXCIsIFwiZ1wiKSwgJyQxJykgOiBtYXRjaGVkUGF0dGVybkFycmF5WzNdO1xyXG4gICAgICAgICAgICByZXN1bHRDU1ZbcmVzdWx0Q1NWLmxlbmd0aCAtIDFdLnB1c2goY2xlYW5WYWx1ZSk7XHJcbiAgICAgICAgICAgIG1hdGNoZWRQYXR0ZXJuQXJyYXkgPSByZWdleFBhdHRlcm4uZXhlYyhjc3ZEYXRhU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdENTVjtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhUmVjb3Jkc0FycmF5RnJvbUNTVkZpbGUoY3N2UmVjb3Jkc0FycmF5OiBhbnksIGhlYWRlckxlbmd0aDogYW55LCBjb25maWc6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGRhdGFBcnIgPSBbXTtcclxuICAgICAgICBjb25zdCBoZWFkZXJzQXJyYXkgPSBjc3ZSZWNvcmRzQXJyYXlbMF07XHJcblxyXG4gICAgICAgIGNvbnN0IHN0YXJ0aW5nUm93VG9QYXJzZURhdGEgPSBjb25maWcuaGVhZGVyID8gMSA6IDA7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydGluZ1Jvd1RvUGFyc2VEYXRhOyBpIDwgY3N2UmVjb3Jkc0FycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjc3ZSZWNvcmRzQXJyYXlbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IGhlYWRlckxlbmd0aCAmJiBjb25maWcuaGVhZGVyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY3N2UmVjb3JkID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkYXRhLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChkYXRhW2pdID09PSB1bmRlZmluZWQpIHx8IChkYXRhW2pdID09PSBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3ZSZWNvcmRbaGVhZGVyc0FycmF5W2pdXSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3N2UmVjb3JkW2hlYWRlcnNBcnJheVtqXV0gPSBkYXRhW2pdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkYXRhQXJyLnB1c2goY3N2UmVjb3JkKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRhdGFBcnIucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGF0YUFycjtcclxuICAgIH1cclxuXHJcbiAgICBpc0NTVkZpbGUoZmlsZTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbGUubmFtZS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKCcuY3N2Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SGVhZGVyQXJyYXkoY3N2UmVjb3Jkc0FycjogYW55KSB7XHJcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IGNzdlJlY29yZHNBcnJbMF07XHJcbiAgICAgICAgY29uc3QgaGVhZGVyQXJyYXkgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGhlYWRlciBvZiBoZWFkZXJzKSB7XHJcbiAgICAgICAgICAgIGhlYWRlckFycmF5LnB1c2goaGVhZGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlckFycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIG5vdENTVkZpbGVFcnJvckhhbmRsZXIob2JzZXJ2ZXI6IE9ic2VydmVyPGFueT4pIHtcclxuICAgICAgICBjb25zdCBuZ2NDU1ZQYXJzZXJFcnJvcjogTmd4Q1NWUGFyc2VyRXJyb3IgPVxyXG4gICAgICAgICAgICB0aGlzLmVycm9yQnVpbGRlcignTk9UX0FfQ1NWX0ZJTEUnLCAnU2VsZWN0ZWQgZmlsZSBpcyBub3QgYSBjc3YgRmlsZSBUeXBlLicsIDIpO1xyXG4gICAgICAgIG9ic2VydmVyLmVycm9yKG5nY0NTVlBhcnNlckVycm9yKTtcclxuICAgIH1cclxuXHJcbiAgICB1bmtub3duQ1NWUGFyc2VyRXJyb3JIYW5kbGVyKG9ic2VydmVyOiBPYnNlcnZlcjxhbnk+KSB7XHJcbiAgICAgICAgY29uc3QgbmdjQ1NWUGFyc2VyRXJyb3I6IE5neENTVlBhcnNlckVycm9yID1cclxuICAgICAgICAgICAgdGhpcy5lcnJvckJ1aWxkZXIoJ1VOS05PV05fRVJST1InLCAnVW5rbm93biBlcnJvci4gUGxlYXNlIHJlZmVyIHRvIG9mZmljaWFsIGRvY3VtZW50YXRpb24gZm9yIGxpYnJhcnkgdXNhZ2UuJywgNDA0KTtcclxuICAgICAgICBvYnNlcnZlci5lcnJvcihuZ2NDU1ZQYXJzZXJFcnJvcik7XHJcbiAgICB9XHJcblxyXG4gICAgYmFkQ1NWRGF0YUZvcm1hdEVycm9ySGFuZGxlcihvYnNlcnZlcjogT2JzZXJ2ZXI8YW55Pikge1xyXG4gICAgICAgIGNvbnN0IG5nY0NTVlBhcnNlckVycm9yOiBOZ3hDU1ZQYXJzZXJFcnJvciA9XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JCdWlsZGVyKCdCQURfQ1NWX0RBVEFfRk9STUFUJywgJ1VuYWJsZSB0byBwYXJzZSBDU1YgRmlsZS4nLCAxKTtcclxuICAgICAgICBvYnNlcnZlci5lcnJvcihuZ2NDU1ZQYXJzZXJFcnJvcik7XHJcbiAgICB9XHJcblxyXG4gICAgZXJyb3JCdWlsZGVyKHR5cGU6IHN0cmluZywgbWVzc2FnZTogYW55LCBjb2RlOiBhbnkpOiBOZ3hDU1ZQYXJzZXJFcnJvciB7XHJcbiAgICAgICAgY29uc3QgbmdjQ1NWUGFyc2VyRXJyb3I6IE5neENTVlBhcnNlckVycm9yID0gbmV3IE5neENTVlBhcnNlckVycm9yKCk7XHJcbiAgICAgICAgbmdjQ1NWUGFyc2VyRXJyb3IudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgbmdjQ1NWUGFyc2VyRXJyb3IubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICAgICAgbmdjQ1NWUGFyc2VyRXJyb3IuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgcmV0dXJuIG5nY0NTVlBhcnNlckVycm9yO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBDU1ZQYXJzZXJDb25maWcge1xyXG4gICAgaGVhZGVyPzogYm9vbGVhbjtcclxuICAgIGRlbGltaXRlcj86IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG59XHJcbiJdfQ==