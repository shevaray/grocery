/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Platform } from '@angular/cdk/platform';
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/platform";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/platform';
export class ImagePreloadService {
    constructor(document, platform) {
        this.document = document;
        this.platform = platform;
        this.counter = new Map();
        this.linkRefs = new Map();
    }
    addPreload(option) {
        if (this.platform.isBrowser) {
            return () => void 0;
        }
        const uniqueKey = `${option.src}${option.srcset}`;
        let currentCount = this.counter.get(uniqueKey) || 0;
        currentCount++;
        this.counter.set(uniqueKey, currentCount);
        if (!this.linkRefs.has(uniqueKey)) {
            const linkNode = this.appendPreloadLink(option);
            this.linkRefs.set(uniqueKey, linkNode);
        }
        return () => {
            if (this.counter.has(uniqueKey)) {
                let count = this.counter.get(uniqueKey);
                count--;
                if (count === 0) {
                    const linkNode = this.linkRefs.get(uniqueKey);
                    this.removePreloadLink(linkNode);
                    this.counter.delete(uniqueKey);
                    this.linkRefs.delete(uniqueKey);
                }
                else {
                    this.counter.set(uniqueKey, count);
                }
            }
        };
    }
    appendPreloadLink(option) {
        const linkNode = this.document.createElement('link');
        linkNode.setAttribute('rel', 'preload');
        linkNode.setAttribute('as', 'image');
        linkNode.setAttribute('href', option.src);
        if (option.srcset) {
            linkNode.setAttribute('imagesrcset', option.srcset);
        }
        this.document.head.appendChild(linkNode);
        return linkNode;
    }
    removePreloadLink(linkNode) {
        if (this.document.head.contains(linkNode)) {
            this.document.head.removeChild(linkNode);
        }
    }
}
ImagePreloadService.ɵfac = function ImagePreloadService_Factory(t) { return new (t || ImagePreloadService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };
ImagePreloadService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ImagePreloadService_Factory() { return new ImagePreloadService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: ImagePreloadService, providedIn: "root" });
ImagePreloadService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Platform }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImagePreloadService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc1.Platform }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtcHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9jb3JlL3NlcnZpY2VzL2ltYWdlLXByZWxvYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQ7QUFDb0M7QUFFaEI7OztBQVVwQixNQUFNLE9BQU8sbUJBQW1CO0FBQ2hDLElBR0UsWUFBc0MsUUFBbUIsRUFBVSxRQUFrQjtBQUFJLFFBQW5ELGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQUFTLGFBQVEsR0FBUixRQUFRLENBQVU7QUFBQyxRQUg5RSxZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7QUFDOUMsUUFBVSxhQUFRLEdBQUcsSUFBSSxHQUFHLEVBQTJCLENBQUM7QUFDeEQsSUFDMEYsQ0FBQztBQUMzRixJQUNFLFVBQVUsQ0FBQyxNQUFxQjtBQUFJLFFBQ2xDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7QUFDakMsWUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFCLFNBQUs7QUFDTCxRQUFJLE1BQU0sU0FBUyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDdEQsUUFBSSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEQsUUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNuQixRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUM5QyxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUN2QyxZQUFNLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0RCxZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM3QyxTQUFLO0FBQ0wsUUFBSSxPQUFPLEdBQUcsRUFBRTtBQUNoQixZQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDdkMsZ0JBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFFLENBQUM7QUFDakQsZ0JBQVEsS0FBSyxFQUFFLENBQUM7QUFDaEIsZ0JBQVEsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLG9CQUFVLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBRSxDQUFDO0FBQ3pELG9CQUFVLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMzQyxvQkFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN6QyxvQkFBVSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxQyxpQkFBUztBQUFDLHFCQUFLO0FBQ2Ysb0JBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzdDLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFFBQUksQ0FBQyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFDVSxpQkFBaUIsQ0FBQyxNQUFxQjtBQUFJLFFBQ2pELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBb0IsQ0FBQztBQUM1RSxRQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzVDLFFBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekMsUUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDOUMsUUFDSSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDdkIsWUFBTSxRQUFRLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUQsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdDLFFBQUksT0FBTyxRQUFRLENBQUM7QUFDcEIsSUFBRSxDQUFDO0FBQ0gsSUFDVSxpQkFBaUIsQ0FBQyxRQUF5QjtBQUFJLFFBQ3JELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQy9DLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9DLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDsyS0FBQztBQUNELCtPQXJESztBQUFDO0VBSEwsVUFBVSxTQUFDLGtCQUNWLFVBQVUsRUFBRSxNQUFNLGNBQ25CLHZFQUVlLDRDQUdELE1BQU0sU0FBQyxRQUFRO0FBQVMsWUFwQjlCLFFBQVE7QUFBRzs7Ozs7Ozs7OzZEQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcblxuaW50ZXJmYWNlIFByZWxvYWRPcHRpb24ge1xuICBzcmM6IHN0cmluZztcbiAgc3Jjc2V0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBQcmVsb2FkRGlzcG9zZUhhbmRsZSA9ICgpID0+IHZvaWQ7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEltYWdlUHJlbG9hZFNlcnZpY2Uge1xuICBwcml2YXRlIGNvdW50ZXIgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuICBwcml2YXRlIGxpbmtSZWZzID0gbmV3IE1hcDxzdHJpbmcsIEhUTUxMaW5rRWxlbWVudD4oKTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBOelNhZmVBbnksIHByaXZhdGUgcGxhdGZvcm06IFBsYXRmb3JtKSB7fVxuXG4gIGFkZFByZWxvYWQob3B0aW9uOiBQcmVsb2FkT3B0aW9uKTogUHJlbG9hZERpc3Bvc2VIYW5kbGUge1xuICAgIGlmICh0aGlzLnBsYXRmb3JtLmlzQnJvd3Nlcikge1xuICAgICAgcmV0dXJuICgpID0+IHZvaWQgMDtcbiAgICB9XG4gICAgY29uc3QgdW5pcXVlS2V5ID0gYCR7b3B0aW9uLnNyY30ke29wdGlvbi5zcmNzZXR9YDtcbiAgICBsZXQgY3VycmVudENvdW50ID0gdGhpcy5jb3VudGVyLmdldCh1bmlxdWVLZXkpIHx8IDA7XG4gICAgY3VycmVudENvdW50Kys7XG4gICAgdGhpcy5jb3VudGVyLnNldCh1bmlxdWVLZXksIGN1cnJlbnRDb3VudCk7XG4gICAgaWYgKCF0aGlzLmxpbmtSZWZzLmhhcyh1bmlxdWVLZXkpKSB7XG4gICAgICBjb25zdCBsaW5rTm9kZSA9IHRoaXMuYXBwZW5kUHJlbG9hZExpbmsob3B0aW9uKTtcbiAgICAgIHRoaXMubGlua1JlZnMuc2V0KHVuaXF1ZUtleSwgbGlua05vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY291bnRlci5oYXModW5pcXVlS2V5KSkge1xuICAgICAgICBsZXQgY291bnQgPSB0aGlzLmNvdW50ZXIuZ2V0KHVuaXF1ZUtleSkhO1xuICAgICAgICBjb3VudC0tO1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICBjb25zdCBsaW5rTm9kZSA9IHRoaXMubGlua1JlZnMuZ2V0KHVuaXF1ZUtleSkhO1xuICAgICAgICAgIHRoaXMucmVtb3ZlUHJlbG9hZExpbmsobGlua05vZGUpO1xuICAgICAgICAgIHRoaXMuY291bnRlci5kZWxldGUodW5pcXVlS2V5KTtcbiAgICAgICAgICB0aGlzLmxpbmtSZWZzLmRlbGV0ZSh1bmlxdWVLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY291bnRlci5zZXQodW5pcXVlS2V5LCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhcHBlbmRQcmVsb2FkTGluayhvcHRpb246IFByZWxvYWRPcHRpb24pOiBIVE1MTGlua0VsZW1lbnQge1xuICAgIGNvbnN0IGxpbmtOb2RlID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJykgYXMgSFRNTExpbmtFbGVtZW50O1xuICAgIGxpbmtOb2RlLnNldEF0dHJpYnV0ZSgncmVsJywgJ3ByZWxvYWQnKTtcbiAgICBsaW5rTm9kZS5zZXRBdHRyaWJ1dGUoJ2FzJywgJ2ltYWdlJyk7XG4gICAgbGlua05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgb3B0aW9uLnNyYyk7XG5cbiAgICBpZiAob3B0aW9uLnNyY3NldCkge1xuICAgICAgbGlua05vZGUuc2V0QXR0cmlidXRlKCdpbWFnZXNyY3NldCcsIG9wdGlvbi5zcmNzZXQpO1xuICAgIH1cbiAgICB0aGlzLmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua05vZGUpO1xuICAgIHJldHVybiBsaW5rTm9kZTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlUHJlbG9hZExpbmsobGlua05vZGU6IEhUTUxMaW5rRWxlbWVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRvY3VtZW50LmhlYWQuY29udGFpbnMobGlua05vZGUpKSB7XG4gICAgICB0aGlzLmRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQobGlua05vZGUpO1xuICAgIH1cbiAgfVxufVxuIl19