/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, Directive, ElementRef } from '@angular/core';
import { distinctUntilChanged, map, startWith, tap } from 'rxjs/operators';
import { NzResizeObserver } from 'ng-zorro-antd/cdk/resize-observer';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-zorro-antd/cdk/resize-observer';
export class NzOverflowItemDirective {
    constructor(nzResizeObserver, elementRef, cdr) {
        this.nzResizeObserver = nzResizeObserver;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.overflowStyle = undefined;
        this.itemWidth$ = this.nzResizeObserver.observe(this.elementRef.nativeElement).pipe(map(([item]) => item.target.offsetWidth), distinctUntilChanged(), startWith(undefined), tap(width => {
            this.itemWidth = width;
        }));
        this.itemWidth = undefined;
    }
    setItemStyle(display, order) {
        const mergedHidden = !display;
        this.overflowStyle = {
            opacity: mergedHidden ? 0 : 1,
            height: mergedHidden ? 0 : undefined,
            overflowY: mergedHidden ? 'hidden' : undefined,
            order: order,
            pointerEvents: mergedHidden ? 'none' : undefined,
            position: mergedHidden ? 'absolute' : undefined
        };
        this.cdr.detectChanges();
    }
}
NzOverflowItemDirective.ɵfac = function NzOverflowItemDirective_Factory(t) { return new (t || NzOverflowItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzResizeObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NzOverflowItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NzOverflowItemDirective, selectors: [["", "nzOverflowItem", ""]], hostVars: 2, hostBindings: function NzOverflowItemDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleMap(ctx.overflowStyle);
    } } });
NzOverflowItemDirective.ctorParameters = () => [
    { type: NzResizeObserver },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzOverflowItemDirective, [{
        type: Directive,
        args: [{
                selector: '[nzOverflowItem]',
                host: {
                    '[style]': 'overflowStyle'
                }
            }]
    }], function () { return [{ type: ɵngcc1.NzResizeObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctaXRlbS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvY2RrL292ZXJmbG93L292ZXJmbG93LWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBUXJFLE1BQU0sT0FBTyx1QkFBdUI7QUFDcEMsSUFVRSxZQUNVLGdCQUFrQyxFQUNuQyxVQUFzQixFQUNyQixHQUFzQjtBQUMvQixRQUhTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNwQyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFDdEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7QUFDbEMsUUFkRSxrQkFBYSxHQUErRCxTQUFTLENBQUM7QUFDeEYsUUFBRSxlQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDNUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUUsSUFBSSxDQUFDLE1BQXNCLENBQUMsV0FBVyxDQUFDLEVBQ3pELG9CQUFvQixFQUFFLEVBQ3RCLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFDcEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ2hCLFlBQU0sSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDN0IsUUFBSSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osUUFBRSxjQUFTLEdBQXVCLFNBQVMsQ0FBQztBQUM1QyxJQUlLLENBQUM7QUFDTixJQUNFLFlBQVksQ0FBQyxPQUFnQixFQUFFLEtBQWE7QUFBSSxRQUM5QyxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQU8sQ0FBQztBQUNsQyxRQUFJLElBQUksQ0FBQyxhQUFhLEdBQUc7QUFDekIsWUFBTSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsWUFBTSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7QUFDMUMsWUFBTSxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVM7QUFDcEQsWUFBTSxLQUFLLEVBQUUsS0FBSztBQUNsQixZQUFNLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUztBQUN0RCxZQUFNLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUztBQUNyRCxTQUFLLENBQUM7QUFDTixRQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0g7bURBbkNDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsa0JBQWtCLGtCQUM1QixJQUFJLEVBQUUsc0JBQ0osU0FBUyxFQUFFLGVBQWUsa0JBQzNCLGNBQ0Y7OztXQUNJO0FBQUM7QUFDVSxZQVRQLGdCQUFnQjtBQUFJLFlBSFUsVUFBVTtBQUFJLFlBQTVDLGlCQUFpQjtBQUFHOzs7Ozs7Ozs7a0pBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHN0YXJ0V2l0aCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBOelJlc2l6ZU9ic2VydmVyIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jZGsvcmVzaXplLW9ic2VydmVyJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256T3ZlcmZsb3dJdGVtXScsXG4gIGhvc3Q6IHtcbiAgICAnW3N0eWxlXSc6ICdvdmVyZmxvd1N0eWxlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56T3ZlcmZsb3dJdGVtRGlyZWN0aXZlIHtcbiAgb3ZlcmZsb3dTdHlsZTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQgfSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgaXRlbVdpZHRoJCA9IHRoaXMubnpSZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KS5waXBlKFxuICAgIG1hcCgoW2l0ZW1dKSA9PiAoaXRlbS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLm9mZnNldFdpZHRoKSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgIHN0YXJ0V2l0aCh1bmRlZmluZWQpLFxuICAgIHRhcCh3aWR0aCA9PiB7XG4gICAgICB0aGlzLml0ZW1XaWR0aCA9IHdpZHRoO1xuICAgIH0pXG4gICk7XG4gIGl0ZW1XaWR0aDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG56UmVzaXplT2JzZXJ2ZXI6IE56UmVzaXplT2JzZXJ2ZXIsXG4gICAgcHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmXG4gICkge31cblxuICBzZXRJdGVtU3R5bGUoZGlzcGxheTogYm9vbGVhbiwgb3JkZXI6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG1lcmdlZEhpZGRlbiA9ICFkaXNwbGF5O1xuICAgIHRoaXMub3ZlcmZsb3dTdHlsZSA9IHtcbiAgICAgIG9wYWNpdHk6IG1lcmdlZEhpZGRlbiA/IDAgOiAxLFxuICAgICAgaGVpZ2h0OiBtZXJnZWRIaWRkZW4gPyAwIDogdW5kZWZpbmVkLFxuICAgICAgb3ZlcmZsb3dZOiBtZXJnZWRIaWRkZW4gPyAnaGlkZGVuJyA6IHVuZGVmaW5lZCxcbiAgICAgIG9yZGVyOiBvcmRlcixcbiAgICAgIHBvaW50ZXJFdmVudHM6IG1lcmdlZEhpZGRlbiA/ICdub25lJyA6IHVuZGVmaW5lZCxcbiAgICAgIHBvc2l0aW9uOiBtZXJnZWRIaWRkZW4gPyAnYWJzb2x1dGUnIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cbn1cbiJdfQ==