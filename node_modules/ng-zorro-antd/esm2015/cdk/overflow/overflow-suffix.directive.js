/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, Directive, ElementRef } from '@angular/core';
import { map, tap } from 'rxjs/operators';
import { NzResizeObserver } from 'ng-zorro-antd/cdk/resize-observer';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-zorro-antd/cdk/resize-observer';
export class NzOverflowSuffixDirective {
    constructor(nzResizeObserver, elementRef, cdr) {
        this.nzResizeObserver = nzResizeObserver;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.suffixStyle = {};
        this.suffixWidth$ = this.nzResizeObserver.observe(this.elementRef.nativeElement).pipe(map(([item]) => item.target.offsetWidth), tap(width => (this.suffixWidth = width)));
        this.suffixWidth = 0;
    }
    setSuffixStyle(start, order) {
        if (start !== null) {
            this.suffixStyle = {
                position: 'absolute',
                left: `${start}px`,
                top: 0,
                opacity: 1,
                order: order
            };
        }
        else {
            this.suffixStyle = {
                opacity: 1,
                order: order
            };
        }
        this.cdr.detectChanges();
    }
}
NzOverflowSuffixDirective.ɵfac = function NzOverflowSuffixDirective_Factory(t) { return new (t || NzOverflowSuffixDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzResizeObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NzOverflowSuffixDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NzOverflowSuffixDirective, selectors: [["", "nzOverflowSuffix", ""]], hostVars: 2, hostBindings: function NzOverflowSuffixDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleMap(ctx.suffixStyle);
    } } });
NzOverflowSuffixDirective.ctorParameters = () => [
    { type: NzResizeObserver },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzOverflowSuffixDirective, [{
        type: Directive,
        args: [{
                selector: '[nzOverflowSuffix]',
                host: {
                    '[style]': 'suffixStyle'
                }
            }]
    }], function () { return [{ type: ɵngcc1.NzResizeObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctc3VmZml4LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9jZGsvb3ZlcmZsb3cvb3ZlcmZsb3ctc3VmZml4LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBUXJFLE1BQU0sT0FBTyx5QkFBeUI7QUFDdEMsSUFNRSxZQUNVLGdCQUFrQyxFQUNsQyxVQUFzQixFQUN0QixHQUFzQjtBQUMvQixRQUhTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFDdkIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7QUFDbEMsUUFWRSxnQkFBVyxHQUFHLEVBQUUsQ0FBQztBQUNuQixRQUFFLGlCQUFZLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDOUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUUsSUFBSSxDQUFDLE1BQXNCLENBQUMsV0FBVyxDQUFDLEVBQ3pELEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUN6QyxDQUFDO0FBQ0osUUFBRSxnQkFBVyxHQUFHLENBQUMsQ0FBQztBQUNsQixJQUlLLENBQUM7QUFDTixJQUNFLGNBQWMsQ0FBQyxLQUFvQixFQUFFLEtBQWE7QUFBSSxRQUNwRCxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7QUFDeEIsWUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHO0FBQ3pCLGdCQUFRLFFBQVEsRUFBRSxVQUFVO0FBQzVCLGdCQUFRLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSTtBQUMxQixnQkFBUSxHQUFHLEVBQUUsQ0FBQztBQUNkLGdCQUFRLE9BQU8sRUFBRSxDQUFDO0FBQ2xCLGdCQUFRLEtBQUssRUFBRSxLQUFLO0FBQ3BCLGFBQU8sQ0FBQztBQUNSLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHO0FBQ3pCLGdCQUFRLE9BQU8sRUFBRSxDQUFDO0FBQ2xCLGdCQUFRLEtBQUssRUFBRSxLQUFLO0FBQ3BCLGFBQU8sQ0FBQztBQUNSLFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0g7cURBcENDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsb0JBQW9CLGtCQUM5QixJQUFJLEVBQUUsc0JBQ0osU0FBUyxFQUFFLGFBQWEsa0JBQ3pCLGNBQ0Y7OztXQUNJO0FBQUM7QUFDVSxZQVRQLGdCQUFnQjtBQUFJLFlBSFUsVUFBVTtBQUFJLFlBQTVDLGlCQUFpQjtBQUFHOzs7Ozs7Ozs7a0pBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBOelJlc2l6ZU9ic2VydmVyIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jZGsvcmVzaXplLW9ic2VydmVyJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW256T3ZlcmZsb3dTdWZmaXhdJyxcbiAgaG9zdDoge1xuICAgICdbc3R5bGVdJzogJ3N1ZmZpeFN0eWxlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56T3ZlcmZsb3dTdWZmaXhEaXJlY3RpdmUge1xuICBzdWZmaXhTdHlsZSA9IHt9O1xuICBzdWZmaXhXaWR0aCQgPSB0aGlzLm56UmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCkucGlwZShcbiAgICBtYXAoKFtpdGVtXSkgPT4gKGl0ZW0udGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5vZmZzZXRXaWR0aCksXG4gICAgdGFwKHdpZHRoID0+ICh0aGlzLnN1ZmZpeFdpZHRoID0gd2lkdGgpKVxuICApO1xuICBzdWZmaXhXaWR0aCA9IDA7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbnpSZXNpemVPYnNlcnZlcjogTnpSZXNpemVPYnNlcnZlcixcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmXG4gICkge31cblxuICBzZXRTdWZmaXhTdHlsZShzdGFydDogbnVtYmVyIHwgbnVsbCwgb3JkZXI6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChzdGFydCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5zdWZmaXhTdHlsZSA9IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGxlZnQ6IGAke3N0YXJ0fXB4YCxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBvcmRlcjogb3JkZXJcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3VmZml4U3R5bGUgPSB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIG9yZGVyOiBvcmRlclxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG59XG4iXX0=