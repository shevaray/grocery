/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Component, ChangeDetectionStrategy, ContentChildren, ElementRef, ContentChild, ChangeDetectorRef } from '@angular/core';
import { BehaviorSubject, combineLatest, ReplaySubject, Subject } from 'rxjs';
import { filter, map, pairwise, startWith, switchMap, takeUntil, withLatestFrom } from 'rxjs/operators';
import { NzResizeObserver } from 'ng-zorro-antd/cdk/resize-observer';
import { NzOverflowItemDirective } from './overflow-item.directive';
import { NzOverflowRestDirective } from './overflow-rest.directive';
import { NzOverflowSuffixDirective } from './overflow-suffix.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-zorro-antd/cdk/resize-observer';

const _c0 = ["*", [["", "appOverflowRest", ""]], [["", "appOverflowSuffix", ""]]];
const _c1 = ["*", "[appOverflowRest]", "[appOverflowSuffix]"];
export class NzOverflowContainerComponent {
    constructor(nzResizeObserver, elementRef, cdr) {
        this.nzResizeObserver = nzResizeObserver;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.contentInit$ = new Subject();
        this.overflowItems = undefined;
        this.overflowSuffix = undefined;
        this.overflowRest = undefined;
        this.overflowItems$ = new ReplaySubject(1);
        this.destroy$ = new Subject();
        this.containerWidth$ = this.nzResizeObserver
            .observe(this.elementRef.nativeElement)
            .pipe(map(([item]) => item.target.clientWidth || 0));
        this.restWidth$ = new BehaviorSubject(0);
        this.suffixWidth$ = new BehaviorSubject(0);
        this.suffixFixedStart$ = new BehaviorSubject(null);
        this.displayCount$ = new BehaviorSubject(Number.MAX_SAFE_INTEGER);
        this.restReady$ = new BehaviorSubject(false);
        this.maxRestWith$ = this.restWidth$.pipe(pairwise(), map(([prevRestWidth, restWidth]) => Math.max(prevRestWidth, restWidth)));
        this.omittedItems$ = combineLatest([this.overflowItems$, this.displayCount$]).pipe(withLatestFrom(this.contentInit$), map(([[overflowItems, displayCount]]) => overflowItems.toArray().slice(displayCount + 1)));
        this.displayRest$ = combineLatest([this.restReady$, this.omittedItems$]).pipe(map(([restReady, omittedItems]) => restReady && !!omittedItems.length));
    }
    updateDisplayCount(count, notReady) {
        this.displayCount$.next(count);
        if (this.overflowItems && !notReady) {
            this.restReady$.next(count < this.overflowItems.length - 1);
        }
    }
    ngOnInit() {
        const overflowItemsWidth$ = this.overflowItems$.pipe(switchMap(items => combineLatest(items.map(item => item.itemWidth$))));
        this.overflowItems$.pipe(takeUntil(this.destroy$)).subscribe(overflowItems => {
            if (!overflowItems.length) {
                this.displayCount$.next(0);
                this.suffixFixedStart$.next(null);
            }
        });
        combineLatest([overflowItemsWidth$, this.containerWidth$, this.maxRestWith$, this.restWidth$, this.suffixWidth$])
            .pipe(filter(([, containerWidth, maxRestWith]) => !!(containerWidth && maxRestWith)), takeUntil(this.destroy$))
            .subscribe(([overflowItemsWidth, containerWidth, maxRestWith, restWidth, suffixWidth]) => {
            let totalWidth = suffixWidth;
            const len = overflowItemsWidth.length;
            const lastIndex = len - 1;
            for (let i = 0; i < len; i += 1) {
                const currentItemWidth = overflowItemsWidth[i];
                // Break since data not ready
                if (currentItemWidth === undefined) {
                    this.updateDisplayCount(i - 1, true);
                    break;
                }
                else {
                    // Find best match
                    totalWidth += currentItemWidth;
                    if (
                    // Only one means `totalWidth` is the final width
                    (lastIndex === 0 && totalWidth <= containerWidth) ||
                        // Last two width will be the final width
                        (i === lastIndex - 1 &&
                            overflowItemsWidth[lastIndex] !== undefined &&
                            totalWidth + overflowItemsWidth[lastIndex] <= containerWidth)) {
                        // Additional check if match the end
                        this.updateDisplayCount(lastIndex);
                        this.suffixFixedStart$.next(null);
                        break;
                    }
                    else if (totalWidth + maxRestWith > containerWidth) {
                        // Can not hold all the content to show rest
                        this.updateDisplayCount(i - 1);
                        this.suffixFixedStart$.next(totalWidth - currentItemWidth - suffixWidth + restWidth);
                        break;
                    }
                    this.cdr.detectChanges();
                }
            }
            if (this.overflowSuffix &&
                overflowItemsWidth[0] !== undefined &&
                overflowItemsWidth[0] + suffixWidth > containerWidth) {
                this.suffixFixedStart$.next(null);
            }
            this.cdr.detectChanges();
        });
        combineLatest([this.suffixFixedStart$, this.displayCount$])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([suffixFixedStart, displayCount]) => {
            var _a;
            (_a = this.overflowSuffix) === null || _a === void 0 ? void 0 : _a.setSuffixStyle(suffixFixedStart, displayCount);
        });
        combineLatest([this.displayCount$, this.overflowItems$])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([displayCount, overflowItems]) => overflowItems.forEach((item, index) => item.setItemStyle(index <= displayCount, index)));
        combineLatest([this.displayRest$, this.displayCount$])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([displayRest, displayCount]) => {
            var _a;
            (_a = this.overflowRest) === null || _a === void 0 ? void 0 : _a.setRestStyle(displayRest, displayRest ? displayCount : Number.MAX_SAFE_INTEGER);
        });
    }
    ngAfterContentInit() {
        var _a, _b, _c;
        (_a = this.overflowItems) === null || _a === void 0 ? void 0 : _a.changes.pipe(startWith(this.overflowItems)).subscribe(this.overflowItems$);
        (_b = this.overflowSuffix) === null || _b === void 0 ? void 0 : _b.suffixWidth$.subscribe(this.suffixWidth$);
        (_c = this.overflowRest) === null || _c === void 0 ? void 0 : _c.restWidth$.subscribe(this.restWidth$);
        this.contentInit$.next();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
NzOverflowContainerComponent.ɵfac = function NzOverflowContainerComponent_Factory(t) { return new (t || NzOverflowContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzResizeObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NzOverflowContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzOverflowContainerComponent, selectors: [["nz-overflow-container"]], contentQueries: function NzOverflowContainerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NzOverflowSuffixDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NzOverflowRestDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NzOverflowItemDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overflowSuffix = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overflowRest = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overflowItems = _t);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([NzResizeObserver])], ngContentSelectors: _c1, decls: 3, vars: 0, template: function NzOverflowContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵprojection(1, 1);
        ɵngcc0.ɵɵprojection(2, 2);
    } }, encapsulation: 2, changeDetection: 0 });
NzOverflowContainerComponent.ctorParameters = () => [
    { type: NzResizeObserver },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
NzOverflowContainerComponent.propDecorators = {
    overflowItems: [{ type: ContentChildren, args: [NzOverflowItemDirective,] }],
    overflowSuffix: [{ type: ContentChild, args: [NzOverflowSuffixDirective,] }],
    overflowRest: [{ type: ContentChild, args: [NzOverflowRestDirective,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzOverflowContainerComponent, [{
        type: Component,
        args: [{
                selector: 'nz-overflow-container',
                template: ` <ng-content></ng-content>
    <ng-content select="[appOverflowRest]"></ng-content>
    <ng-content select="[appOverflowSuffix]"></ng-content>`,
                providers: [NzResizeObserver],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.NzResizeObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { overflowItems: [{
            type: ContentChildren,
            args: [NzOverflowItemDirective]
        }], overflowSuffix: [{
            type: ContentChild,
            args: [NzOverflowSuffixDirective]
        }], overflowRest: [{
            type: ContentChild,
            args: [NzOverflowRestDirective]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9jZGsvb3ZlcmZsb3cvb3ZlcmZsb3ctY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUNMLFNBQVMsRUFDVCx1QkFBdUIsRUFDdkIsZUFBZSxFQUVmLFVBQVUsRUFJVixZQUFZLEVBQ1osaUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFjLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7QUFVeEUsTUFBTSxPQUFPLDRCQUE0QjtBQUFHLElBb0MxQyxZQUNVLGdCQUFrQyxFQUNsQyxVQUFzQixFQUN0QixHQUFzQjtBQUMvQixRQUhTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFDdkIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7QUFDbEMsUUF2Q0UsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0FBQ3JDLFFBQ0Usa0JBQWEsR0FBbUQsU0FBUyxDQUFDO0FBQzVFLFFBQ0UsbUJB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QyxrQkFDVCxRQUFRLEVBQUUsdUJBQXVCLGtCQUNqQyxRQUFRLEVBQUU7V0FFK0Msa0JBQ3pELFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLGtCQUM3QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxjQUNoRDs7Ozs7Ozs7Ozs7Ozs7aURBQ0k7QUFBQztBQUFzRCxZQWRuRCxnQkFBZ0I7QUFBSSxZQVYzQixVQUFVO0FBQ1YsWUFJQSxpQkFBaUI7QUFDakI7QUFBRztBQUN3Qiw0QkFtQjFCLGVBQWUsU0FBQyx1QkFBdUI7QUFDckMsNkJBQ0YsWUFBWSxTQUFDLHlCQUF5QjtBQUNwQywyQkFDRixZQUFZLFNBQUMsdUJBQXVCO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgRWxlbWVudFJlZixcbiAgT25Jbml0LFxuICBBZnRlckNvbnRlbnRJbml0LFxuICBPbkRlc3Ryb3ksXG4gIENvbnRlbnRDaGlsZCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwLCBwYWlyd2lzZSwgc3RhcnRXaXRoLCBzd2l0Y2hNYXAsIHRha2VVbnRpbCwgd2l0aExhdGVzdEZyb20gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE56UmVzaXplT2JzZXJ2ZXIgfSBmcm9tICduZy16b3Jyby1hbnRkL2Nkay9yZXNpemUtb2JzZXJ2ZXInO1xuXG5pbXBvcnQgeyBOek92ZXJmbG93SXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vb3ZlcmZsb3ctaXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnpPdmVyZmxvd1Jlc3REaXJlY3RpdmUgfSBmcm9tICcuL292ZXJmbG93LXJlc3QuZGlyZWN0aXZlJztcbmltcG9ydCB7IE56T3ZlcmZsb3dTdWZmaXhEaXJlY3RpdmUgfSBmcm9tICcuL292ZXJmbG93LXN1ZmZpeC5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei1vdmVyZmxvdy1jb250YWluZXInLFxuICB0ZW1wbGF0ZTogYCA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW2FwcE92ZXJmbG93UmVzdF1cIj48L25nLWNvbnRlbnQ+XG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW2FwcE92ZXJmbG93U3VmZml4XVwiPjwvbmctY29udGVudD5gLFxuICBwcm92aWRlcnM6IFtOelJlc2l6ZU9ic2VydmVyXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTnpPdmVyZmxvd0NvbnRhaW5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgY29udGVudEluaXQkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgQENvbnRlbnRDaGlsZHJlbihOek92ZXJmbG93SXRlbURpcmVjdGl2ZSlcbiAgb3ZlcmZsb3dJdGVtczogUXVlcnlMaXN0PE56T3ZlcmZsb3dJdGVtRGlyZWN0aXZlPiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgQENvbnRlbnRDaGlsZChOek92ZXJmbG93U3VmZml4RGlyZWN0aXZlKVxuICBvdmVyZmxvd1N1ZmZpeDogTnpPdmVyZmxvd1N1ZmZpeERpcmVjdGl2ZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgQENvbnRlbnRDaGlsZChOek92ZXJmbG93UmVzdERpcmVjdGl2ZSkgb3ZlcmZsb3dSZXN0OiBOek92ZXJmbG93UmVzdERpcmVjdGl2ZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgb3ZlcmZsb3dJdGVtcyQgPSBuZXcgUmVwbGF5U3ViamVjdDxRdWVyeUxpc3Q8TnpPdmVyZmxvd0l0ZW1EaXJlY3RpdmU+PigxKTtcbiAgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBjb250YWluZXJXaWR0aCQgPSB0aGlzLm56UmVzaXplT2JzZXJ2ZXJcbiAgICAub2JzZXJ2ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudClcbiAgICAucGlwZShtYXAoKFtpdGVtXSkgPT4gaXRlbS50YXJnZXQuY2xpZW50V2lkdGggfHwgMCkpO1xuICByZXN0V2lkdGgkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+KDApO1xuICBzdWZmaXhXaWR0aCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4oMCk7XG4gIHN1ZmZpeEZpeGVkU3RhcnQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXIgfCBudWxsPihudWxsKTtcbiAgZGlzcGxheUNvdW50JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPihOdW1iZXIuTUFYX1NBRkVfSU5URUdFUik7XG4gIHJlc3RSZWFkeSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcbiAgbWF4UmVzdFdpdGgkID0gdGhpcy5yZXN0V2lkdGgkLnBpcGUoXG4gICAgcGFpcndpc2UoKSxcbiAgICBtYXAoKFtwcmV2UmVzdFdpZHRoLCByZXN0V2lkdGhdKSA9PiBNYXRoLm1heChwcmV2UmVzdFdpZHRoLCByZXN0V2lkdGgpKVxuICApO1xuICBvbWl0dGVkSXRlbXMkID0gY29tYmluZUxhdGVzdChbdGhpcy5vdmVyZmxvd0l0ZW1zJCwgdGhpcy5kaXNwbGF5Q291bnQkXSkucGlwZShcbiAgICB3aXRoTGF0ZXN0RnJvbSh0aGlzLmNvbnRlbnRJbml0JCksXG4gICAgbWFwKChbW292ZXJmbG93SXRlbXMsIGRpc3BsYXlDb3VudF1dKSA9PiBvdmVyZmxvd0l0ZW1zLnRvQXJyYXkoKS5zbGljZShkaXNwbGF5Q291bnQgKyAxKSlcbiAgKTtcbiAgZGlzcGxheVJlc3QkID0gY29tYmluZUxhdGVzdChbdGhpcy5yZXN0UmVhZHkkLCB0aGlzLm9taXR0ZWRJdGVtcyRdKS5waXBlKFxuICAgIG1hcCgoW3Jlc3RSZWFkeSwgb21pdHRlZEl0ZW1zXSkgPT4gcmVzdFJlYWR5ICYmICEhb21pdHRlZEl0ZW1zLmxlbmd0aClcbiAgKTtcblxuICB1cGRhdGVEaXNwbGF5Q291bnQoY291bnQ6IG51bWJlciwgbm90UmVhZHk/OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwbGF5Q291bnQkLm5leHQoY291bnQpO1xuICAgIGlmICh0aGlzLm92ZXJmbG93SXRlbXMgJiYgIW5vdFJlYWR5KSB7XG4gICAgICB0aGlzLnJlc3RSZWFkeSQubmV4dChjb3VudCA8IHRoaXMub3ZlcmZsb3dJdGVtcy5sZW5ndGggLSAxKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG56UmVzaXplT2JzZXJ2ZXI6IE56UmVzaXplT2JzZXJ2ZXIsXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZlxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgY29uc3Qgb3ZlcmZsb3dJdGVtc1dpZHRoJCA9IHRoaXMub3ZlcmZsb3dJdGVtcyQucGlwZShcbiAgICAgIHN3aXRjaE1hcChpdGVtcyA9PiBjb21iaW5lTGF0ZXN0KGl0ZW1zLm1hcChpdGVtID0+IGl0ZW0uaXRlbVdpZHRoJCkpKVxuICAgICkgYXMgT2JzZXJ2YWJsZTxudW1iZXJbXT47XG4gICAgdGhpcy5vdmVyZmxvd0l0ZW1zJC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKG92ZXJmbG93SXRlbXMgPT4ge1xuICAgICAgaWYgKCFvdmVyZmxvd0l0ZW1zLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRpc3BsYXlDb3VudCQubmV4dCgwKTtcbiAgICAgICAgdGhpcy5zdWZmaXhGaXhlZFN0YXJ0JC5uZXh0KG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbWJpbmVMYXRlc3QoW292ZXJmbG93SXRlbXNXaWR0aCQsIHRoaXMuY29udGFpbmVyV2lkdGgkLCB0aGlzLm1heFJlc3RXaXRoJCwgdGhpcy5yZXN0V2lkdGgkLCB0aGlzLnN1ZmZpeFdpZHRoJF0pXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKChbLCBjb250YWluZXJXaWR0aCwgbWF4UmVzdFdpdGhdKSA9PiAhIShjb250YWluZXJXaWR0aCAmJiBtYXhSZXN0V2l0aCkpLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKFtvdmVyZmxvd0l0ZW1zV2lkdGgsIGNvbnRhaW5lcldpZHRoLCBtYXhSZXN0V2l0aCwgcmVzdFdpZHRoLCBzdWZmaXhXaWR0aF0pID0+IHtcbiAgICAgICAgbGV0IHRvdGFsV2lkdGggPSBzdWZmaXhXaWR0aDtcbiAgICAgICAgY29uc3QgbGVuID0gb3ZlcmZsb3dJdGVtc1dpZHRoLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gbGVuIC0gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRJdGVtV2lkdGggPSBvdmVyZmxvd0l0ZW1zV2lkdGhbaV07XG4gICAgICAgICAgLy8gQnJlYWsgc2luY2UgZGF0YSBub3QgcmVhZHlcbiAgICAgICAgICBpZiAoY3VycmVudEl0ZW1XaWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURpc3BsYXlDb3VudChpIC0gMSwgdHJ1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmluZCBiZXN0IG1hdGNoXG4gICAgICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRJdGVtV2lkdGg7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgLy8gT25seSBvbmUgbWVhbnMgYHRvdGFsV2lkdGhgIGlzIHRoZSBmaW5hbCB3aWR0aFxuICAgICAgICAgICAgICAobGFzdEluZGV4ID09PSAwICYmIHRvdGFsV2lkdGggPD0gY29udGFpbmVyV2lkdGgpIHx8XG4gICAgICAgICAgICAgIC8vIExhc3QgdHdvIHdpZHRoIHdpbGwgYmUgdGhlIGZpbmFsIHdpZHRoXG4gICAgICAgICAgICAgIChpID09PSBsYXN0SW5kZXggLSAxICYmXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dJdGVtc1dpZHRoW2xhc3RJbmRleF0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIHRvdGFsV2lkdGggKyBvdmVyZmxvd0l0ZW1zV2lkdGhbbGFzdEluZGV4XSEgPD0gY29udGFpbmVyV2lkdGgpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgLy8gQWRkaXRpb25hbCBjaGVjayBpZiBtYXRjaCB0aGUgZW5kXG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlRGlzcGxheUNvdW50KGxhc3RJbmRleCk7XG4gICAgICAgICAgICAgIHRoaXMuc3VmZml4Rml4ZWRTdGFydCQubmV4dChudWxsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRvdGFsV2lkdGggKyBtYXhSZXN0V2l0aCA+IGNvbnRhaW5lcldpZHRoKSB7XG4gICAgICAgICAgICAgIC8vIENhbiBub3QgaG9sZCBhbGwgdGhlIGNvbnRlbnQgdG8gc2hvdyByZXN0XG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlRGlzcGxheUNvdW50KGkgLSAxKTtcbiAgICAgICAgICAgICAgdGhpcy5zdWZmaXhGaXhlZFN0YXJ0JC5uZXh0KHRvdGFsV2lkdGggLSBjdXJyZW50SXRlbVdpZHRoIC0gc3VmZml4V2lkdGggKyByZXN0V2lkdGgpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMub3ZlcmZsb3dTdWZmaXggJiZcbiAgICAgICAgICBvdmVyZmxvd0l0ZW1zV2lkdGhbMF0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgIG92ZXJmbG93SXRlbXNXaWR0aFswXSArIHN1ZmZpeFdpZHRoID4gY29udGFpbmVyV2lkdGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5zdWZmaXhGaXhlZFN0YXJ0JC5uZXh0KG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfSk7XG4gICAgY29tYmluZUxhdGVzdChbdGhpcy5zdWZmaXhGaXhlZFN0YXJ0JCwgdGhpcy5kaXNwbGF5Q291bnQkXSlcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcbiAgICAgIC5zdWJzY3JpYmUoKFtzdWZmaXhGaXhlZFN0YXJ0LCBkaXNwbGF5Q291bnRdKSA9PiB7XG4gICAgICAgIHRoaXMub3ZlcmZsb3dTdWZmaXg/LnNldFN1ZmZpeFN0eWxlKHN1ZmZpeEZpeGVkU3RhcnQsIGRpc3BsYXlDb3VudCk7XG4gICAgICB9KTtcbiAgICBjb21iaW5lTGF0ZXN0KFt0aGlzLmRpc3BsYXlDb3VudCQsIHRoaXMub3ZlcmZsb3dJdGVtcyRdKVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZSgoW2Rpc3BsYXlDb3VudCwgb3ZlcmZsb3dJdGVtc10pID0+XG4gICAgICAgIG92ZXJmbG93SXRlbXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IGl0ZW0uc2V0SXRlbVN0eWxlKGluZGV4IDw9IGRpc3BsYXlDb3VudCwgaW5kZXgpKVxuICAgICAgKTtcbiAgICBjb21iaW5lTGF0ZXN0KFt0aGlzLmRpc3BsYXlSZXN0JCwgdGhpcy5kaXNwbGF5Q291bnQkXSlcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcbiAgICAgIC5zdWJzY3JpYmUoKFtkaXNwbGF5UmVzdCwgZGlzcGxheUNvdW50XSkgPT4ge1xuICAgICAgICB0aGlzLm92ZXJmbG93UmVzdD8uc2V0UmVzdFN0eWxlKGRpc3BsYXlSZXN0LCBkaXNwbGF5UmVzdCA/IGRpc3BsYXlDb3VudCA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtcbiAgICAgIH0pO1xuICB9XG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm92ZXJmbG93SXRlbXM/LmNoYW5nZXMucGlwZShzdGFydFdpdGgodGhpcy5vdmVyZmxvd0l0ZW1zKSkuc3Vic2NyaWJlKHRoaXMub3ZlcmZsb3dJdGVtcyQpO1xuICAgIHRoaXMub3ZlcmZsb3dTdWZmaXg/LnN1ZmZpeFdpZHRoJC5zdWJzY3JpYmUodGhpcy5zdWZmaXhXaWR0aCQpO1xuICAgIHRoaXMub3ZlcmZsb3dSZXN0Py5yZXN0V2lkdGgkLnN1YnNjcmliZSh0aGlzLnJlc3RXaWR0aCQpO1xuICAgIHRoaXMuY29udGVudEluaXQkLm5leHQoKTtcbiAgfVxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==