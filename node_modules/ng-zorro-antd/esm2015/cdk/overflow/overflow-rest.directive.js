/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, Directive, ElementRef } from '@angular/core';
import { map, startWith, tap } from 'rxjs/operators';
import { NzResizeObserver } from 'ng-zorro-antd/cdk/resize-observer';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-zorro-antd/cdk/resize-observer';
export class NzOverflowRestDirective {
    constructor(nzResizeObserver, elementRef, cdr) {
        this.nzResizeObserver = nzResizeObserver;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.restStyle = undefined;
        this.restWidth$ = this.nzResizeObserver.observe(this.elementRef.nativeElement).pipe(map(([item]) => item.target.offsetWidth), startWith(0), tap(width => (this.restWidth = width)));
        this.restWidth = 0;
    }
    setRestStyle(display, order) {
        const mergedHidden = !display;
        this.restStyle = {
            opacity: mergedHidden ? 0 : 1,
            height: mergedHidden ? 0 : undefined,
            overflowY: mergedHidden ? 'hidden' : undefined,
            order: order,
            pointerEvents: mergedHidden ? 'none' : undefined,
            position: mergedHidden ? 'absolute' : undefined
        };
        this.cdr.detectChanges();
    }
}
NzOverflowRestDirective.ɵfac = function NzOverflowRestDirective_Factory(t) { return new (t || NzOverflowRestDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzResizeObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NzOverflowRestDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NzOverflowRestDirective, selectors: [["", "nzOverflowRest", ""]], hostVars: 2, hostBindings: function NzOverflowRestDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleMap(ctx.restStyle);
    } } });
NzOverflowRestDirective.ctorParameters = () => [
    { type: NzResizeObserver },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzOverflowRestDirective, [{
        type: Directive,
        args: [{
                selector: '[nzOverflowRest]',
                host: {
                    '[style]': 'restStyle'
                }
            }]
    }], function () { return [{ type: ɵngcc1.NzResizeObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctcmVzdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvY2RrL292ZXJmbG93L292ZXJmbG93LXJlc3QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBUXJFLE1BQU0sT0FBTyx1QkFBdUI7QUFDcEMsSUFPRSxZQUNVLGdCQUFrQyxFQUNsQyxVQUFzQixFQUN0QixHQUFzQjtBQUMvQixRQUhTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFDdkIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7QUFDbEMsUUFYRSxjQUFTLEdBQStELFNBQVMsQ0FBQztBQUNwRixRQUFFLGVBQVUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUM1RSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBRSxJQUFJLENBQUMsTUFBc0IsQ0FBQyxXQUFXLENBQUMsRUFDekQsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUNaLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUN2QyxDQUFDO0FBQ0osUUFBRSxjQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLElBSUssQ0FBQztBQUNOLElBQ0UsWUFBWSxDQUFDLE9BQWdCLEVBQUUsS0FBYTtBQUFJLFFBQzlDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBTyxDQUFDO0FBQ2xDLFFBQUksSUFBSSxDQUFDLFNBQVMsR0FBRztBQUNyQixZQUFNLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxZQUFNLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztBQUMxQyxZQUFNLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUztBQUNwRCxZQUFNLEtBQUssRUFBRSxLQUFLO0FBQ2xCLFlBQU0sYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTO0FBQ3RELFlBQU0sUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTO0FBQ3JELFNBQUssQ0FBQztBQUNOLFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUM3QixJQUFFLENBQUM7QUFDSDttREFoQ0MsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxrQkFBa0Isa0JBQzVCLElBQUksRUFBRSxzQkFDSixTQUFTLEVBQUUsV0FBVyxrQkFDdkIsY0FDRjs7O1dBQ0k7QUFBQztBQUNVLFlBVFAsZ0JBQWdCO0FBQUksWUFIVSxVQUFVO0FBQUksWUFBNUMsaUJBQWlCO0FBQUc7Ozs7Ozs7OztrSkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWFwLCBzdGFydFdpdGgsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTnpSZXNpemVPYnNlcnZlciB9IGZyb20gJ25nLXpvcnJvLWFudGQvY2RrL3Jlc2l6ZS1vYnNlcnZlcic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuek92ZXJmbG93UmVzdF0nLFxuICBob3N0OiB7XG4gICAgJ1tzdHlsZV0nOiAncmVzdFN0eWxlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56T3ZlcmZsb3dSZXN0RGlyZWN0aXZlIHtcbiAgcmVzdFN0eWxlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB8IHVuZGVmaW5lZCB9IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICByZXN0V2lkdGgkID0gdGhpcy5uelJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpLnBpcGUoXG4gICAgbWFwKChbaXRlbV0pID0+IChpdGVtLnRhcmdldCBhcyBIVE1MRWxlbWVudCkub2Zmc2V0V2lkdGgpLFxuICAgIHN0YXJ0V2l0aCgwKSxcbiAgICB0YXAod2lkdGggPT4gKHRoaXMucmVzdFdpZHRoID0gd2lkdGgpKVxuICApO1xuICByZXN0V2lkdGggPSAwO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG56UmVzaXplT2JzZXJ2ZXI6IE56UmVzaXplT2JzZXJ2ZXIsXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZlxuICApIHt9XG5cbiAgc2V0UmVzdFN0eWxlKGRpc3BsYXk6IGJvb2xlYW4sIG9yZGVyOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBtZXJnZWRIaWRkZW4gPSAhZGlzcGxheTtcbiAgICB0aGlzLnJlc3RTdHlsZSA9IHtcbiAgICAgIG9wYWNpdHk6IG1lcmdlZEhpZGRlbiA/IDAgOiAxLFxuICAgICAgaGVpZ2h0OiBtZXJnZWRIaWRkZW4gPyAwIDogdW5kZWZpbmVkLFxuICAgICAgb3ZlcmZsb3dZOiBtZXJnZWRIaWRkZW4gPyAnaGlkZGVuJyA6IHVuZGVmaW5lZCxcbiAgICAgIG9yZGVyOiBvcmRlcixcbiAgICAgIHBvaW50ZXJFdmVudHM6IG1lcmdlZEhpZGRlbiA/ICdub25lJyA6IHVuZGVmaW5lZCxcbiAgICAgIHBvc2l0aW9uOiBtZXJnZWRIaWRkZW4gPyAnYWJzb2x1dGUnIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cbn1cbiJdfQ==