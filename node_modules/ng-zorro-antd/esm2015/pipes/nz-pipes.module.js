/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { NzAggregatePipe } from './nz-aggregate.pipe';
import { NzBytesPipe } from './nz-bytes.pipe';
import { NzToCssUnitPipe } from './nz-css-unit.pipe';
import { NzEllipsisPipe } from './nz-ellipsis.pipe';
import { NzSafeNullPipe } from './nz-safe-null.pipe';
import { NzSanitizerPipe } from './nz-sanitizer.pipe';
import { NzTrimPipe } from './nz-trim.pipe';
import * as ɵngcc0 from '@angular/core';
const pipes = [
    NzToCssUnitPipe,
    NzSafeNullPipe,
    NzSanitizerPipe,
    NzTrimPipe,
    NzBytesPipe,
    NzAggregatePipe,
    NzEllipsisPipe
];
export class NzPipesModule {
}
NzPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NzPipesModule });
NzPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NzPipesModule_Factory(t) { return new (t || NzPipesModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzPipesModule, { declarations: function () { return [NzToCssUnitPipe,
        NzSafeNullPipe,
        NzSanitizerPipe,
        NzTrimPipe,
        NzBytesPipe,
        NzAggregatePipe,
        NzEllipsisPipe]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NzToCssUnitPipe,
        NzSafeNullPipe,
        NzSanitizerPipe,
        NzTrimPipe,
        NzBytesPipe,
        NzAggregatePipe,
        NzEllipsisPipe]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzPipesModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [pipes],
                declarations: [pipes]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotcGlwZXMubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb21wb25lbnRzL3BpcGVzL256LXBpcGVzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUU1QyxNQUFNLEtBQUssR0FBRztBQUNkLElBQUUsZUFBZTtBQUNqQixJQUFFLGNBQWM7QUFDaEIsSUFBRSxlQUFlO0FBQ2pCLElBQUUsVUFBVTtBQUNaLElBQUUsV0FBVztBQUNiLElBQUUsZUFBZTtBQUNqQixJQUFFLGNBQWM7QUFDaEIsQ0FBQyxDQUFDO0FBT0YsTUFBTSxPQUFPLGFBQWE7QUFBRzt5Q0FMNUIsUUFBUSxTQUFDO0tBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLGtCQUN2QixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsa0JBQ2hCLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUN0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpBZ2dyZWdhdGVQaXBlIH0gZnJvbSAnLi9uei1hZ2dyZWdhdGUucGlwZSc7XG5pbXBvcnQgeyBOekJ5dGVzUGlwZSB9IGZyb20gJy4vbnotYnl0ZXMucGlwZSc7XG5pbXBvcnQgeyBOelRvQ3NzVW5pdFBpcGUgfSBmcm9tICcuL256LWNzcy11bml0LnBpcGUnO1xuaW1wb3J0IHsgTnpFbGxpcHNpc1BpcGUgfSBmcm9tICcuL256LWVsbGlwc2lzLnBpcGUnO1xuaW1wb3J0IHsgTnpTYWZlTnVsbFBpcGUgfSBmcm9tICcuL256LXNhZmUtbnVsbC5waXBlJztcbmltcG9ydCB7IE56U2FuaXRpemVyUGlwZSB9IGZyb20gJy4vbnotc2FuaXRpemVyLnBpcGUnO1xuaW1wb3J0IHsgTnpUcmltUGlwZSB9IGZyb20gJy4vbnotdHJpbS5waXBlJztcblxuY29uc3QgcGlwZXMgPSBbXG4gIE56VG9Dc3NVbml0UGlwZSxcbiAgTnpTYWZlTnVsbFBpcGUsXG4gIE56U2FuaXRpemVyUGlwZSxcbiAgTnpUcmltUGlwZSxcbiAgTnpCeXRlc1BpcGUsXG4gIE56QWdncmVnYXRlUGlwZSxcbiAgTnpFbGxpcHNpc1BpcGVcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBleHBvcnRzOiBbcGlwZXNdLFxuICBkZWNsYXJhdGlvbnM6IFtwaXBlc11cbn0pXG5leHBvcnQgY2xhc3MgTnpQaXBlc01vZHVsZSB7fVxuIl19